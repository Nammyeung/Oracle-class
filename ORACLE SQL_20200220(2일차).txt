-- 3장 SQL 문장
CREATE TABLE ex3_3 ( 
   employee_id  NUMBER(6),
   emp_name     VARCHAR2(80),
   salary       NUMBER(8,2),
   manager_id   NUMBER(6) );
          
   INSERT INTO ex3_3
   SELECT employee_id, emp_name, salary, manager_id
   FROM employees a
   WHERE a.manager_id = 124
   AND a.salary BETWEEN 2000 AND 3000;

DELETE ex3_3;

INSERT INTO ex3_3 (employee_id)
SELECT e.employee_id 
  FROM employees e, sales s
 WHERE e.employee_id = s.employee_id
   AND s.SALES_MONTH BETWEEN '200010' AND '200012'
 GROUP BY e.employee_id;
 
COMMIT;

관리자사번(manager_id)이 145번인 사원을 찾아 위 테이블에 있는 사원의 사번과 일치하면 
보너스 금액(bonus_amt)에 자신의 급여의 1%를 보너스로 갱신하고, 
ex3_3 테이블에 있는 사원의 사번과 일치하지 않는 사원을 신규 입력 
(이때 보너스 금액은 급여의 0.5%로 한다) 하는 MERGE 문을 작성해 보자.

SELECT * FROM employees;
SELECT * FROM sales;


DELETE ex3_3;

MERGE INTO ex3_3 d
    USING (SELECT employee_id, salary, manager_id from employees where manager_id = 145) b
    ON (d.employee_id = b.employee_id)
WHEN MATCHED THEN
    UPDATE SET d.bonus_amt = d.bonus_amt + b.salary * 0.01
WHEN NOT MATCHED THEN
    INSERT (d.employee_id, d.bonus_amt) VALUES (b.employee_id, b.salary * 0.005);


-- 4장 SQL 함수

--1. 사원테이블(employees)에는 phone_number라는 컬럼에 사원의 전화번호가 ###.###.#### 형태로 저장되어 있다.
--여기서 처음 3자리 숫자 대신 서울 지역번호인 (02)를 붙여 전화번호를 출력하도록 쿼리를 작성해 보자.

SELECT * from employees;
SELECT employee_id, LPAD(SUBSTR(phone_number, 5), 12, '(02)') from employees;

--2. 현재일자 기준으로 사원테이블의 입사일자(hire_date)를 참조해서 근속년수가 10년 이상인 사원을 다음과 같은 형태의 결과를 출력하도록 쿼리를 작성해보자. 
--   (근속년수가 많은 사원순서대로 결과를 나오도록 하자)

----------------------------------------
--사원번호  사원명  입사일자 근속년수
----------------------------------------


--<정답>

SELECT employee_id, emp_name, HIRE_DATE, 
       ROUND((sysdate - hire_date) / 365)
 FROM employees
 WHERE ROUND((sysdate - hire_date) / 365) >= 10
 ORDER BY 3;
 
 
--3. 고객 테이블(CUSTOMERS)에는 고객 전화번호(cust_main_phone_number) 컬럼이 있다. 이 컬럼 값은 ###-###-#### 형태인데,
--   '-' 대신 '/'로 바꿔 출력하는 쿼리를 작성해 보자.
   
   
--<정답>

SELECT cust_name, cust_main_phone_number, 
       REPLACE(cust_main_phone_number, '-', '/') new_phone_number
  FROM customers;


--4. 고객 테이블(CUSTOMERS)의 고객 전화번호(cust_main_phone_number) 컬럼을 다른 문자로 대체(일종의 암호화)하도록 쿼리를 작성해 보자.
--
--
--<정답>

SELECT cust_name, cust_main_phone_number, 
       TRANSLATE(cust_main_phone_number, '0123456789', 'acielsifke') new_phone_number
  FROM customers;
   
   

--5. 고객 테이블(CUSTOMERS)에는 고객의 출생년도(cust_year_of_birth) 컬럼이 있다. 현재일 기준으로 이 컬럼을 활용해
--   30대, 40대, 50대를 구분해 출력하고, 나머지 연령대는 '기타'로 출력하는 쿼리를 작성해보자. 
   
--<정답>

SELECT CUST_NAME, 
       CUST_YEAR_OF_BIRTH, 
       DECODE( TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10), 3, '30대', 
                                                                          4, '40대',
                                                                          5, '50대',
                                                                          '기타') generation
FROM CUSTOMERS;   

 SELECT CUST_NAME, CUST_YEAR_OF_BIRTH, (TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH),
 TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH) / 10) FROM CUSTOMERS;

--6. 4번 문제는 30~50대 까지만 표시했는데, 전 연령대를 표시하도록 쿼리를 작성하는데, 
--   이번에는 DECODE 대신 CASE 표현식을 사용해보자. 
   
--<정답>
   
SELECT CUST_NAME, 
       CUST_YEAR_OF_BIRTH, 
       CASE WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN  1 AND 19 THEN '10대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 20 AND 29 THEN '20대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 30 AND 39 THEN '30대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 40 AND 49 THEN '40대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 50 AND 59 THEN '50대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 60 AND 69 THEN '60대'
            WHEN TRUNC((TO_CHAR(SYSDATE, 'YYYY') - CUST_YEAR_OF_BIRTH)/10)  BETWEEN 70 AND 79 THEN '70대'
          ELSE '기타' END AS new_generation
FROM CUSTOMERS;     

--5장 그룹쿼리 집합연산자

TO_CHAR(hire_date, 'YYYY') AS hire_year, COUNT(*) FROM employees 
GROUP BY TO_CHAR(HIRE_DATE, 'YYYY') ORDER BY TO_CHAR(HIRE_DATE, 'YYYY');

SELECT PERIOD, REGION, SUM(loan_jan_amt) FROM kor_loan_status WHERE period LIKE '2012%'
GROUP BY PERIOD, REGION ORDER BY PERIOD, REGION;

SELECT TO_CHAR(hire_date, 'YYYY') AS hire_year,
       COUNT(*)
       FROM employees 
       GROUP BY TO_CHAR(hire_date, 'YYYY')
       ORDER BY TO_CHAR(hire_date, 'YYYY');

SELECT PERIOD, REGION, SUM(loan_jan_amt) FROM kor_loan_status
WHERE PERIOD LIKE '2012%' 
GROUP BY PERIOD, REGION
ORDER BY PERIOD, REGION;

SELECT PERIOD, GUBUN, SUM(loan_jan_amt) tot1_jan FROM kor_loan_status
WHERE PERIOD LIKE '2013%'
GROUP BY PERIOD, ROLLUP( gubun );

SELECT * FROM EMPLOYEES;

SELECT PERIOD, GUBUN, SUM(loan_jan_amt) tot1_jan
FROM kor_loan_status
WHERE PERIOD LIKE '2013%'
GROUP BY PERIOD, GUBUN
UNION
SELECT PERIOD, '', SUM(loan_jan_amt) tot1_jan
FROM kor_loan_status
WHERE PERIOD LIKE '2013%'
GROUP BY PERIOD;

SELECT period, gubun,
       CASE WHEN gubun = '주택담보대출' THEN SUM(loan_jan_amt) ELSE 0 END 주택담보대출액,
       CASE WHEN gubun = '기타대출'     THEN SUM(loan_jan_amt) ELSE 0 END 기타대출액 
  FROM kor_loan_status
 GROUP BY period, gubun;

SELECT * FROM kor_loan_status;

SELECT PERIOD, GUBUN, SUM(loan_jan_amt) tot1_jan
FROM kor_loan_status
WHERE PERIOD LIKE '2013%'
GROUP BY PERIOD, GUBUN;

SELECT PERIOD, GUBUN, SUM(loan_jan_amt) 주택담보대출액, 0 기타대출액 from kor_loan_status 
WHERE PERIOD = '201311' AND GUBUN = '주택담보대출' GROUP BY PERIOD, GUBUN
UNION ALL
SELECT PERIOD, GUBUN, 0 주택담보대출액, SUM(loan_jan_amt) 기타대출액 FROM kor_loan_status
WHERE PERIOD = '201311' AND GUBUN = '기타대출' GROUP BY PERIOD, GUBUN;


SELECT * FROM KOR_LOAN_STATUS;
SELECT REGION,
    SUM(AMT1) ,
    SUM(AMT2) ,
    SUM(AMT3) ,
    SUM(AMT4) ,
    SUM(AMT5) ,
    SUM(AMT6) ,
    SUM(AMT6) 
FROM (
    SELECT REGION,
        CASE WHEN PERIOD = '201111' THEN LOAN_JAN_AMT ELSE 0 END AMT1,
        CASE WHEN PERIOD = '201112' THEN LOAN_JAN_AMT ELSE 0 END AMT2,
        CASE WHEN PERIOD = '201210' THEN LOAN_JAN_AMT ELSE 0 END AMT3,
        CASE WHEN PERIOD = '201211' THEN LOAN_JAN_AMT ELSE 0 END AMT4,
        CASE WHEN PERIOD = '201212' THEN LOAN_JAN_AMT ELSE 0 END AMT5,
        CASE WHEN PERIOD = '201310' THEN LOAN_JAN_AMT ELSE 0 END AMT6,
        CASE WHEN PERIOD = '201311' THEN LOAN_JAN_AMT ELSE 0 END AMT7
    FROM KOR_LOAN_STATUS
    )
GROUP BY REGION
ORDER BY REGION;
 