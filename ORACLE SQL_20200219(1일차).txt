SELECT * FROM DEPT02;

SELECT * FROM DEPT;

SELECT * FROM EMP;

SELECT DNAME, LOC FROM DEPT;

INSERT INTO DEPT VALUES(50, '총무부', '서울'); /* DEPT 테이블 안에 ()안의 VALUES를 넣는다 */
UPDATE DEPT SET LOC='부산' WHERE DNAME='총무부'; /* DEPT 테이블의 총무부를 찾아서 해당 LOC 변수에 해당하는 데이터를 부산으로 바꿔라 ( WHERE = IF ) */
DELETE FROM DEPT WHERE DEPTNO=50;  

SELECT * FROM DEPT01;

CREATE TABLE DEPT01 (    
DEPTNO NUMBER(4),    
DNAME VARCHAR2(10),    
LOC VARCHAR2(9) ); /* TABLE DEPT01을 생성하고 3개의 변수 이름 자료형(자료 크기) 를 형성한다 */ 

DESC DEPT02; -- description.

ALTER TABLE DEPT01 MODIFY(DNAME VARCHAR2(30)); /* DEPT01 테이블을 변경하는데 변수 DNAME의 자료형 VARCHAR2의 크기를 10에서 30으로 변경하겠다. */ 

RENAME DEPT01 TO DEPT02; /* 테이블 이름은 DEPT01에서 DEPT02로 변경하겠다*/

INSERT INTO DEPT02 VALUES(10, '개발부', '서울'); /* VALUES에 해당하는 데이터 (큰따옴표로 묶지 말고 작은따옴표로 묶어서)를 DEPT02테이블로 넣는다. */

TRUNCATE TABLE DEPT02; /* 테이블은 그대로 유지한 채 테이블의 값을 모두 제거한다.(DROP + COMMIT) */

DROP TABLE DEPT02; /* TRUNCATE 명령어와는 다르게 DEPT02 테이블을 완전하게 제거 */

DROP TABLE DEPT02 CASCADE CONSTRAINTS;  -- CASCADE CONSTRAINTS 옵션은 종속된 제약조건을 삭제한다. 

SELECT * FROM TAB;

DESC EMP;
SELECT * FROM EMP;

SELECT * FROM EMP;

SELECT ENAME, AVG(SAL) "AVERAGe" FROM EMP GROUP BY ENAME;

SELECT ENAME, SAL, JOB, COMM, SAL*12, SAL*12+COMM FROM EMP; /* x + NULL 값을 모르는 값으로 처리 => NULL이 0이 아닌 조사되어지지 못한 값으로 여기기 때문*/

SELECT ENAME, SAL, JOB, COMM, SAL*12, SAL*12+NVL(COMM, 0) FROM EMP

SELECT ENAME, SAL*12+NVL(COMM, 0) AS ANNSAL FROM EMP;

-- AS 키워드는 생략이 가능하다. 
SELECT ENAME, SAL*12+NVL(COMM, 0) ANNSAL FROM EMP; 

SELECT ENAME, SAL*12+NVL(COMM, 0) "A N N S A L" FROM EMP; 

SELECT ENAME, SAL*12+NVL(COMM, 0) "연봉" FROM EMP;

SELECT ENAME || ' IS A ' || JOB "sentence" FROM EMP; /* 중간에 문자를 연결하여 하나의 변수를 생성 가능 */

SELECT DEPTNO FROM EMP;

SELECT DISTINCT DEPTNO 
FROM EMP;

DESC EMP;

SELECT DISTINCT DEPTNO FROM EMP;

SELECT * FROM EMP;

SELECT * FROM EMP WHERE SAL >= 3000; -- EMP 테이블의 모든 변수의 값을 SAL 변수의 값이 3000이 넘는 범위 안에서 표출

SELECT * FROM EMP WHERE SAL <> 3000;

SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME = 'FORD';

SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME = 'ford'; -- 테이블 내에 저장된 데이터 값은 대소문자를 구분한다. => 출력 x 

SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME = 'FORD';

SELECT * FROM EMP;

SELECT * FROM EMP WHERE HIREDATE <= '1982/01/01';

/* 
논리합(OR, ||)
   T OR T = T
   T OR F = T
   F OR T = T
   F OR F = F
   
논리곱 (AND, &&)
   T AND T = T
   T AND F = F
   F AND T = F
   F AND F = F
   
   
*/
select * from emp where deptno = 10 and job = 'MANAGER' ;
SELECT * FROM emp WHERE DEPTNO = 10 AND JOB = 'MANAGER' ; -- 명령문은 대소문자를 안가림 // 데이터는 대소문자 가림

SELECT * FROM EMP WHERE NOT DEPTNO = 10;

SELECT * FROM EMP WHERE SAL >= 2000 AND SAL <= 3000;

SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000;

SELECT * FROM EMP WHERE SAL NOT BETWEEN 2000 AND 3000;

SELECT * FROM EMP WHERE HIREDATE BETWEEN '1987/01/01' AND '1987/12/31';

SELECT * FROM EMP WHERE COMM=300 OR COMM=500 OR COMM=1400;

SELECT * FROM EMP WHERE COMM IN(300, 500, 1400);

SELECT * FROM EMP WHERE COMM<>300 AND COMM<>500 AND COMM<>1400; 

SELECT * FROM EMP WHERE COMM NOT IN(300, 500, 1400); 

SELECT * FROM EMP WHERE ENAME LIKE 'F%';

SELECT * FROM EMP WHERE ENAME LIKE '%A%'; -- A 문자를 포함한 데이터 선택

SELECT * FROM EMP WHERE ENAME LIKE '%N'; -- 가장 뒷 자리의 문자가 N인 데이터 선택

SELECT * FROM EMP WHERE ENAME LIKE '_A%'; -- 한자리, 두번째 자리가 반드시 A인 데이터

SELECT * FROM EMP WHERE ENAME LIKE '__A%'; -- 세번째 자리가 반드시 A인 데이터

SELECT * FROM EMP WHERE ENAME NOT LIKE '%A%'; 

SELECT * FROM EMP WHERE COMM=NULL;  -- NULL 값을 = 연산자로 판단할 수 없다. 

SELECT * FROM EMP WHERE COMM IS NULL;  -- EMP 테이블에서 COMM 컬럼이 NULL 사원을 출력한다.

SELECT * FROM EMP WHERE COMM IS NOT NULL; -- NULL은 모르는 값이기 때문에 EQUAL(=)로 동등비교를 할 수 없다?

SELECT * FROM EMP ORDER BY SAL ASC; -- 생략해도 기본값이 오름차순

SELECT * FROM EMP ORDER BY SAL;

SELECT * FROM EMP ORDER BY ENAME;  -- 문자 데이터의 경우 아스키 코드 값으로 저장되므로 
--아스키 코드 값을 기준으로 정렬된다. 

SELECT * FROM EMP ORDER BY SAL DESC;  
SELECT * FROM EMP ORDER BY HIREDATE DESC;  
SELECT * FROM EMP ORDER BY SAL DESC, ENAME ASC; 

--1
SELECT * FROM EMP ORDER BY HIREDATE DESC, EMPNO ASC;

SELECT DEPTNO AS "사원", ENAME "사원번호" FROM EMP WHERE ENAME LIKE 'K%';

SELECT DEPTNO AS "사원", ENAME "사원번호" FROM EMP WHERE ENAME LIKE '%K%';

SELECT DEPTNO AS "사원", ENAME "사원번호" FROM EMP WHERE ENAME LIKE '%K_';

/*
PL/SQL(피엘에스큐엘)은 상용 관계형 데이터베이스 시스템인 오라클 DBMS에서 
SQL 언어를 확장하기 위해 사용하는 컴퓨터 프로그래밍 언어 중 하나이다.
*/
-- '--' 입력어가 statement 역할을 한다
-- 데이터베이스에서 NULL은 "unknown"값이다. => 알려지지 않은 내용이기 때문에