-- 20200226(수)
DROP table orders;
DROP table book;
DROP table customer;


CREATE TABLE Book (
  bookid      NUMBER(2) PRIMARY KEY,
  bookname    VARCHAR2(40),
  publisher   VARCHAR2(40),
  price       NUMBER(8) 
);

CREATE TABLE  Customer (
  custid      NUMBER(2) PRIMARY KEY,  
  name        VARCHAR2(40),
  address     VARCHAR2(50),
  phone       VARCHAR2(20)
);


CREATE TABLE Orders (
  orderid NUMBER(2) PRIMARY KEY,
  custid  NUMBER(2) REFERENCES Customer(custid),
  bookid  NUMBER(2) REFERENCES Book(bookid),
  saleprice NUMBER(8) ,
  orderdate DATE
);




-- Book, Customer, Orders 데이터 생성
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');  
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전',  NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, TO_DATE('2014-07-01','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (2, 1, 3, 21000, TO_DATE('2014-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, TO_DATE('2014-07-03','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (4, 3, 6, 6000, TO_DATE('2014-07-04','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (5, 4, 7, 20000, TO_DATE('2014-07-05','yyyy-mm-dd'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE( '2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2014-07-08','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2014-07-09','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2014-07-10','yyyy-mm-dd'));
​
--1. 
SELECT * FROM Book WHERE bookid = 1;

--2.
SELECT bookname FROM Book WHERE bookid = 1;
SELECT * FROM Book WHERE price >= 20000;

--3.
SELECT SUM(saleprice) From Orders WHERE custid = 1;

--4.
SELECT * FROM Orders WHERE custid = 1;
SELECT COUNT(*) FROM Orders WHERE custid = 1;

--5.
SELECT COUNT(*) FROM Book;

--2-2
SELECT DISTINCT publisher FROM Book;

--2-3
SELECT name, address FROM Customer;

--2-4
SELECT * FROM Orders
WHERE orderdate >= '2014-07-04' AND orderdate <= '2014-07-07';

--2-5
SELECT * FROM Orders 
WHERE orderdate <= '2014-07-04' OR orderdate >= '2014-07-07';

--2-6
SELECT * FROM Customer WHERE name LIKE '김%';
SELECT * FROM Customer WHERE name LIKE '박__'; -- 무조건 세글자여야 하고, 김으로 시작 (정처기 필수 문제)

--2-7
SELECT * FROM Customer WHERE name LIKE '김%아'; -- underscore는 한 글자만 지칭, %는 여러 글자를 포함

--1.(5)

SELECT c.name, b.publisher, b.price FROM Customer c ,Orders o, Book b 
where c.custid = o.custid and b.bookid = o.bookid and c.name = '박지성';

--1.(6)

SELECT c.name, b.bookname, b.price, b.price-o.saleprice FROM Customer c ,Orders o, Book b 
where c.custid = o.custid and b.bookid = o.bookid and c.name = '박지성';

--1.(7)

SELECT c.name, b.bookname, b.price, b.price-o.saleprice FROM Customer c ,Orders o, Book b 
where c.custid = o.custid and b.bookid = o.bookid and c.name != '박지성';

--2.(8)

select * from Customer c where custid in (select * from Orders o. Customer c where c.custid != o.custid);
-- 정답
select distinct custid from orders;
select name from Customer;

Select name from customer where custid not in (select distinct custid from orders);

--2.(9)

select sum(saleprice), avg(saleprice) from Orders group by saleprice;

--2.(10)

SELECT c.name, o.saleprice FROM Customer c , Orders o where c.custid = o.custid order by saleprice desc;

--2.(11)
select * from Book;
SELECT c.name, b.bookname, o.saleprice FROM Customer c , Orders o, Book b 
where c.custid = o.custid and b.bookid = o.bookid 
order by saleprice desc;

--2.(12)
select bookid, Bookname, price from Book b where bookid in 
(select bookid from Book b, Orders o where b.bookid = o.bookid 
and b.price - o.saleprice = max(b.price - o.saleprice));
select custid min(b.price - o.saleprice) from Book b, Orders o where b.bookid = o.bookid ;

----정담
SELECT max(price-saleprice) from orders o , book b where o.bookid = b.bookid;
SELECT * FROM Orders o , book b WHERE o.bookid = b.bookid and (price-saleprice)
= (select max(price-saleprice) from Orders o, Book b where o.bookid = b.bookid); 

SELECT b.bookid, bookname, publisher, price, saleprice FROM Orders o , book b 
WHERE o.bookid = b.bookid and (price-saleprice)
= (select max(price-saleprice) from Orders o, Book b where o.bookid = b.bookid);

--2.(13)
select c.name, o.saleprice, b.price  from Orders o , Book b, Customer c 
where o.custid = c.custid and b.bookid = o.bookid ;
-------------------------정답

-- 도서의 판매액 평균 // A
select avg(saleprice) from orders;

-- 고객별 평균구매액 // B
select name, avg(saleprice) from orders o, customer c where o.custid = c.custid group by name;

select name from (select name, avg(saleprice) avg from orders o, customer c where o.custid = c.custid
group by name) b where b.avg > (select avg(saleprice) from orders);
--SQL... 기초....
SELECT * FROM Book WHERE BOOKNAME LIKE '축구%';

--튜플에서는 행의 순서와 열의 순서는 중요하지 않다.

SELECT publisher from Book;

SELECT DISTINCT publisher FROM Book;

SELECT * FROM Book where price < 20000;

SELECT * FROM Book where publisher IN ('굿스포츠', '대한미디어');

SELECT bookname, publisher FROM Book where bookname like '축구의 역사';

SELECT * from Book where bookname like '%축구%' and price >= 20000;

select * from Book order by bookname;

SELECT * FROM Book ORDER BY price, bookname;

select custid, orderid, count(*), sum(saleprice) from orders group by custid, 
orderid order by custid, orderid;

select sum(saleprice), sum(bookid) from Orders;

select custid, sum(saleprice) , avg(saleprice), max(saleprice), min(saleprice) 
from Orders group by custid order by max(saleprice);

-- 스칼라 : 1개값
-- count : 집계함수 ~ sum, 행의 갯수를 세겠다.
-- group by를 쓸 일이 그렇게 많지 않다.(쓰는 예 : 남녀별 시간, 수치 등 통계 수치)
SELECT * from Orders;

SELECT custid, SUM(saleprice) from Orders Group by custid
HAVING SUM(saleprice) >= 20000 -- group by는 조건을 having으로 설정한다.
;
-- group by 한 개의 셀로 
합쳐진다. 칼럼 중 합쳐지지 않는 부분이 있을 수 있어 오류.

select * from Orders WHERE SUM(saleprice) > 100000;

SELECT * FROM Orders where saleprice > 7000
GROUP BY custid;

select custid, sum(saleprice) from Orders where saleprice > 7000
GROUP BY custid order by sum(saleprice) desc; 
-- 빅데이터의 핵심, 데이터를 그룹핑 한 다음에 파이썬으로 통계 분석 수행.

select custid, sum(saleprice) from ORDERS WHERE saleprice > 7000 -- where : 튜플을 추출할 때
GROUP BY custid
having sum(saleprice) > 5000; -- having : group by한 데이터를 표출할 때

select custid, count(*) as 도서수량 from Orders where saleprice >= 8000 
group by custid having count(*) >= 2;

----- 조인

SELECT * FROM Orders; -- 99% Inner join 1% Outer Join 0.xx Cross Join

SELECT * FROM Orders, Customer WHERE customer.custid = Orders.custid;

-- inner join은 Primary키와 Foreign키가 동시에 존재해야 가능함.(Unique, not null 규칙 필수)
SELECT * FROM Orders, Customer, Book 
where orders.custid = customer.custid and orders.bookid = book.bookid 
and customer.name LIKE '박지성'; -- 박지성이 구매한 모든 내역
-- 한 쪽에 Primary Key, 한 쪽에 Foreign Key
-- 3개를 조인 => Cross join 10(Book) * 10(Order) * 5(Customer)


